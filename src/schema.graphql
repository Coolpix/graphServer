type Query {
  info: String!
  feed(filter: String, skip: Int, first: Int, orderBy: LinkOrderByInput): Feed!
  teams: [Team]!
  players: [Player]!
  seasons: [Season]!
  rollers: [Roller]
  roller(id: ID!): Roller!
  gifts: [Gift]
  gift: Gift
}

type Mutation {
  post(url: String!, description: String!): Link!
  signup(email: String!, password:String!, name:String!): AuthPayload
  login(email:String!, password:String!): AuthPayload
  vote(linkId: ID!): Vote
  team(name: String!): Team!
  player(name: String!, teamId: ID!): Player!
  season(name: String!, year: Int!): Season!
  roller(name: String!, avatar: String!): Roller
  gift(name: String!, photo: String!): Gift
  updateGift(id: ID!, rollerID: ID!): Gift
  deleteGift(id: ID!): Gift
  deleteRoller(id: ID!): Gift
}

type Season {
  id: ID!
  name: String!
  year: Int!
  teams: [Team]
}

type Player {
  id: ID!
  name: String!
  team: Team!
}

type Team {
  id: ID!
  name: String!
  players: [Player]
  season: Season!
}

type Link {
  id: ID!
  description: String!
  url: String!
  postedBy: User
  votes: [Vote!]!
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  links: [Link!]!
  votes: [Vote!]!
}

type Roller {
  id: ID!
  name: String!
  gift: Gift
  avatar: String!
}

type Gift {
  id: ID!
  name: String!
  roller: Roller
  photo: String!
}

type Subscription {
  newLink: Link
  newVote: Vote
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}

type Feed {
  links: [Link!]!
  count: Int!
}

enum LinkOrderByInput {
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
}
